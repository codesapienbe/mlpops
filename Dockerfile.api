FROM python:3.11-slim

WORKDIR /app

# Install system dependencies
RUN apt-get update && apt-get install -y \
    gcc \
    curl \
    wget \
    git \
    bash \
    vim \
    ca-certificates \
    && rm -rf /var/lib/apt/lists/*

# Install uv (for running tasks like `uv run`)
RUN curl -LsSf https://astral.sh/uv/install.sh | sh
ENV PATH="/root/.local/bin:${PATH}"

# Copy dependency files first for better caching
COPY pyproject.toml ./
COPY uv.lock ./
COPY README.md ./
COPY src/ ./src/

# Install Python dependencies using uv (consistent with local development)
RUN uv sync --frozen

# Copy source code and config
COPY config.yml ./

# Copy data files
COPY data/ ./data/

# Create directories
RUN mkdir -p /app/models /app/data/raw /app/data/processed

# Ensure required raw dataset is present inside the container (fallback to sample if missing)
RUN bash -lc "if [ ! -f /app/data/raw/jobs.csv ] && [ -f /app/data/sample/software_jobs.csv ]; then cp /app/data/sample/software_jobs.csv /app/data/raw/jobs.csv; fi"

# Download NLTK data using uv (consistent with local development)
RUN uv run python -c "import nltk; nltk.download('punkt', quiet=True); nltk.download('stopwords', quiet=True); nltk.download('wordnet', quiet=True); nltk.download('omw-1.4', quiet=True)"

# Run training during build to ensure model is available
RUN uv run train

EXPOSE 8000

CMD ["uv", "run", "api"]
